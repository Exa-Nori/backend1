#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import requests
import re
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7585621279:AAFLcwzw-lrh5PCHvgGZqZ6lG-TIPlwXZZo')
CHAT_ID = os.environ.get('CHAT_ID', '5682979333')
TELEGRAM_API_TIMEOUT = 30
MAX_NAME_LENGTH = 100
MAX_MESSAGE_LENGTH = 1000

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = phone.strip()
    return bool(re.match(r'^\+?7[0-9]{10}$|^8[0-9]{10}$', phone))

def validate_required_fields(data: Dict[str, Any], required_fields: list) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    for field in required_fields:
        if not data.get(field):
            return f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
    return None

def validate_field_length(data: Dict[str, Any], field: str, max_length: int) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª—è"""
    value = data.get(field, '')
    if len(str(value)) > max_length:
        return f"–ü–æ–ª–µ '{field}' –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_length} —Å–∏–º–≤–æ–ª–æ–≤"
    return None

# Telegram API
class TelegramAPI:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def send_message(self, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        response = requests.post(
            f"{self.base_url}/sendMessage",
            json={"chat_id": self.chat_id, "text": text},
            timeout=TELEGRAM_API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram API
telegram_api = TelegramAPI(BOT_TOKEN, CHAT_ID)

def create_response(status_code: int, body: Dict[str, Any], headers: Dict[str, str] = None) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Netlify"""
    response = {
        "statusCode": status_code,
        "body": json.dumps(body, ensure_ascii=False),
        "headers": {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Headers": "Content-Type, Authorization",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Max-Age": "86400"
        }
    }
    if headers:
        response["headers"].update(headers)
    return response

def handler(event, context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram"""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
    if event.get('httpMethod') == 'OPTIONS':
        return create_response(200, {"message": "OK"})
    
    # –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    if event.get('httpMethod') != 'POST':
        return create_response(405, {"error": "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"})
    
    try:
        data = json.loads(event.get('body', '{}'))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['serviceTitle', 'servicePrice', 'duration', 'date', 'name', 'phone']
        validation_error = validate_required_fields(data, required_fields)
        if validation_error:
            return create_response(400, {"error": validation_error})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
        length_validations = [
            ('name', MAX_NAME_LENGTH),
            ('comments', MAX_MESSAGE_LENGTH)
        ]
        for field, max_length in length_validations:
            if field in data:
                length_error = validate_field_length(data, field, max_length)
                if length_error:
                    return create_response(400, {"error": length_error})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = data.get('phone', '').strip()
        if not validate_phone(phone):
            return create_response(400, {"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991112233 –∏–ª–∏ 89991112233)."})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        date_value = data.get('date', '').strip()
        if not date_value:
            return create_response(400, {"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É—Å–ª—É–≥–∏"})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration = int(data.get('duration', 0))
        if duration <= 0:
            return create_response(400, {"error": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"})
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        comments_text = f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data.get('comments', '')}" if data.get('comments') else ""
        email_text = f"\nüìß Email: {data.get('email', '')}" if data.get('email') else ""
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        price_str = str(data.get('servicePrice', '0')).replace('‚ÇΩ', '').replace(' ', '').replace(',', '')
        base_price = float(price_str)
        total_price = base_price * duration
        total_text = f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:,.0f} ‚ÇΩ"
        
        telegram_message = f"""üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó —Å —Å–∞–π—Ç–∞ L'√éLE DE R√äVE

üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:
‚Ä¢ –£—Å–ª—É–≥–∞: {data.get('serviceTitle', '')}
‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {data.get('servicePrice', '')}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –µ–¥.{total_text}
‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_value}

üë§ –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
‚Ä¢ –ò–º—è: {data.get('name', '')}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}{email_text}{comments_text}

---
üìÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: {data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Å–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"""
        
        result = telegram_api.send_message(telegram_message)
        
        return create_response(200, {
            "success": True,
            "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            "telegram_response": result
        })
        
    except json.JSONDecodeError:
        return create_response(400, {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"})
    except Exception as e:
        return create_response(500, {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}"}) 