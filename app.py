from flask import Flask, send_from_directory, request, jsonify
import requests
import logging
from flask_compress import Compress
import os
import re
from functools import wraps
from typing import Dict, Any, Optional
from config import get_config

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Config = get_config()

app = Flask(__name__, static_folder="/www/lile-des-reves.com/")
Compress(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = phone.strip()
    return bool(re.match(r'^\+?7[0-9]{10}$|^8[0-9]{10}$', phone))

def validate_required_fields(data: Dict[str, Any], required_fields: list) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    for field in required_fields:
        if not data.get(field):
            return f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
    return None

def validate_field_length(data: Dict[str, Any], field: str, max_length: int) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª—è"""
    value = data.get(field, '')
    if len(str(value)) > max_length:
        return f"–ü–æ–ª–µ '{field}' –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_length} —Å–∏–º–≤–æ–ª–æ–≤"
    return None

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
def handle_telegram_errors(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram API"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except requests.exceptions.RequestException as e:
            logger.error(f"Network error in {f.__name__}: {str(e)}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API"}), 500
        except Exception as e:
            logger.error(f"Unexpected error in {f.__name__}: {str(e)}")
            return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500
    return decorated_function

# Telegram API —Ñ—É–Ω–∫—Ü–∏–∏
class TelegramAPI:
    def __init__(self, bot_token: str, chat_id: str):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    def get_bot_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        response = requests.get(
            f"{self.base_url}/getMe",
            timeout=Config.TELEGRAM_API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    
    def send_message(self, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        response = requests.post(
            f"{self.base_url}/sendMessage",
            json={"chat_id": self.chat_id, "text": text},
            timeout=Config.TELEGRAM_API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()
    
    def get_updates(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        response = requests.get(
            f"{self.base_url}/getUpdates",
            timeout=Config.TELEGRAM_API_TIMEOUT
        )
        response.raise_for_status()
        return response.json()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram API
telegram_api = TelegramAPI(Config.BOT_TOKEN, Config.CHAT_ID)

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

@app.route("/sitemap.xml")
def sitemap():
    return send_from_directory(app.static_folder, "sitemap.xml", mimetype='application/xml')

@app.route("/robots.txt")
def robots():
    return send_from_directory(app.static_folder, "robots.txt", mimetype='text/plain')

@app.route('/api/test-telegram', methods=['GET'])
@handle_telegram_errors
def test_telegram():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    bot_info = telegram_api.get_bot_info()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_message = "üîß –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º L'√éLE DE R√äVE\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    send_result = telegram_api.send_message(test_message)
    
    return jsonify({
        "success": True,
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "bot_info": bot_info.get('result', {}),
        "chat_id": Config.CHAT_ID
    })

@app.route('/api/get-chat-id', methods=['GET'])
@handle_telegram_errors
def get_chat_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö chat ID"""
    updates_data = telegram_api.get_updates()
    updates = updates_data.get('result', [])
    
    chat_ids = []
    for update in updates[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if 'message' in update:
            chat = update['message']['chat']
            chat_ids.append({
                'chat_id': chat['id'],
                'chat_type': chat['type'],
                'title': chat.get('title', ''),
                'username': chat.get('username', ''),
                'first_name': chat.get('first_name', ''),
                'last_name': chat.get('last_name', '')
            })
    
    return jsonify({
        "success": True,
        "current_chat_id": Config.CHAT_ID,
        "available_chats": chat_ids,
        "total_updates": len(updates)
    })

@app.route('/api/send-order-to-telegram', methods=['POST'])
@handle_telegram_errors
def send_order_to_telegram():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ Telegram"""
    data = request.get_json()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
    required_fields = ['serviceTitle', 'servicePrice', 'duration', 'date', 'name', 'phone']
    validation_error = validate_required_fields(data, required_fields)
    if validation_error:
        return jsonify({"error": validation_error}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
    length_validations = [
        ('name', Config.MAX_NAME_LENGTH),
        ('comments', Config.MAX_MESSAGE_LENGTH)  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º–∏
    ]
    
    for field, max_length in length_validations:
        if field in data:  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
            length_error = validate_field_length(data, field, max_length)
            if length_error:
                return jsonify({"error": length_error}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = data.get('phone', '').strip()
    if not validate_phone(phone):
        return jsonify({
            "error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991112233 –∏–ª–∏ 89991112233)."
        }), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    date_value = data.get('date', '').strip()
    if not date_value:
        return jsonify({"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É—Å–ª—É–≥–∏"}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        duration = int(data.get('duration', 0))
        if duration <= 0:
            return jsonify({"error": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"}), 400
    except ValueError:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"}), 400
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ
    comments_text = f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}" if data.get('comments') else ""
    email_text = f"\nüìß Email: {data['email']}" if data.get('email') else ""
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ * –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã
        price_str = data['servicePrice'].replace('‚ÇΩ', '').replace(' ', '').replace(',', '')
        base_price = float(price_str)
        total_price = base_price * duration
        total_text = f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:,.0f} ‚ÇΩ"
    except (ValueError, AttributeError):
        total_text = f"\nüí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {data['servicePrice']}"
    
    telegram_message = f"""üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó —Å —Å–∞–π—Ç–∞ L'√éLE DE R√äVE

üìã –î–ï–¢–ê–õ–ò –ó–ê–ö–ê–ó–ê:
‚Ä¢ –£—Å–ª—É–≥–∞: {data['serviceTitle']}
‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {data['servicePrice']}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –µ–¥.{total_text}
‚Ä¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_value}

üë§ –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
‚Ä¢ –ò–º—è: {data['name']}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}{email_text}{comments_text}

---
üìÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: {data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Å–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    result = telegram_api.send_message(telegram_message)
    
    return jsonify({
        "success": True,
        "message": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        "telegram_response": result
    })

@app.route('/api/send-to-telegram', methods=['POST'])
@handle_telegram_errors
def send_to_telegram():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    data = request.get_json()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['name', 'message', 'phone']
    validation_error = validate_required_fields(data, required_fields)
    if validation_error:
        return jsonify({"error": validation_error}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–æ–ª–µ–π
    length_validations = [
        ('name', Config.MAX_NAME_LENGTH),
        ('message', Config.MAX_MESSAGE_LENGTH)
    ]
    
    for field, max_length in length_validations:
        length_error = validate_field_length(data, field, max_length)
        if length_error:
            return jsonify({"error": length_error}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = data.get('phone', '').strip()
    if not validate_phone(phone):
        return jsonify({
            "error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991112233 –∏–ª–∏ 89991112233)."
        }), 400
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    email_text = f"\nüìß Email: {data['email']}" if data.get('email') else ""
    phone_text = f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    telegram_message = f"""üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ L'√éLE DE R√äVE

üë§ –ò–º—è: {data['name']}{email_text}{phone_text}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"""
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    result = telegram_api.send_message(telegram_message)
    
    return jsonify({
        "success": True,
        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "telegram_response": result
    })

@app.route('/<path:path>')
def static_proxy(path):
    return send_from_directory(app.static_folder, path)

if __name__ == '__main__':
    app.run(debug=Config.DEBUG)