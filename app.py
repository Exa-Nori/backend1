from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import logging
from functools import wraps
import os
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__, static_folder='static')
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config.update(
    SECRET_KEY=os.getenv('FLASK_SECRET_KEY', 'dev-secret-key'),
    TELEGRAM_BOT_TOKEN=os.getenv('TELEGRAM_BOT_TOKEN'),
    TELEGRAM_CHAT_ID=os.getenv('TELEGRAM_CHAT_ID')
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def json_response(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ JSON-–æ—Ç–≤–µ—Ç–æ–≤"""
    @wraps(f)
    def wrapper(*args, **kwargs):
        try:
            result = f(*args, **kwargs)
            return jsonify({
                "status": "success",
                "data": result
            })
        except ValueError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
            return jsonify({
                "status": "error",
                "message": str(e)
            }), 400
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            return jsonify({
                "status": "error",
                "message": "Internal server error"
            }), 500
    return wrapper

@app.route('/')
def serve_index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return send_from_directory(app.static_folder, 'index.html')

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({"status": "healthy"})

@app.route('/api/services', methods=['GET'])
@json_response
def get_services():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
    return {
        "services": [
            {"id": 1, "name": "–£—Ö–æ–¥ –∑–∞ –ø–æ–∂–∏–ª—ã–º–∏", "icon": "elderly"},
            {"id": 2, "name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —É—Ö–æ–¥", "icon": "medical_services"},
            {"id": 3, "name": "–ë—ã—Ç–æ–≤–∞—è –ø–æ–º–æ—â—å", "icon": "home"},
            {"id": 4, "name": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "icon": "psychology"}
        ]
    }

@app.route('/api/contact', methods=['POST'])
@json_response
def send_contact_message():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ form-data
    data = request.get_json() if request.is_json else request.form
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    required_fields = ['name', 'email', 'message']
    if not all(field in data for field in required_fields):
        raise ValueError("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    text = f"""
    üì© –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–∞–π—Ç–∞:
    ‚îú –ò–º—è: {data['name']}
    ‚îú Email: {data['email']}
    ‚îî –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}
    """
    
    telegram_url = f"https://api.telegram.org/bot{app.config['TELEGRAM_BOT_TOKEN']}/sendMessage"
    response = requests.post(
        telegram_url,
        json={
            "chat_id": app.config['TELEGRAM_CHAT_ID'],
            "text": text,
            "parse_mode": "HTML"
        },
        timeout=10
    )
    response.raise_for_status()

    return {"message": "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "status": "error",
        "message": "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }), 404

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(
        host=os.getenv('FLASK_HOST', '0.0.0.0'),
        port=int(os.getenv('FLASK_PORT', 5000)),
        debug=os.getenv('FLASK_DEBUG', 'False') == 'True'
    )

    