from flask import Flask, send_from_directory, request, jsonify
import requests
import logging
from flask_compress import Compress

app = Flask(__name__, static_folder="public")
Compress(app)
logging.basicConfig(level=logging.DEBUG)

@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

@app.route('/api/send-to-telegram', methods=['POST'])
def send_to_telegram():
    bot_token = "6847127004:AAHJ8N5td3PAm40KJh2kY_2rMoCI72th4qg"
    chat_id = "719874188"

    data = request.get_json()
    if not data or 'name' not in data or 'message' not in data:
        return jsonify({"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"}), 400

    # Include email if provided
    email_text = f"\nüìß Email: {data['email']}" if data.get('email') else ""
    
    telegram_message = f"""üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ L'√éLE DE R√äVE

üë§ –ò–º—è: {data['name']}{email_text}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"""

    try:
        response = requests.post(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            json={"chat_id": chat_id, "text": telegram_message},
            timeout=10
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞
        logging.debug(f"Telegram API Response: {response.status_code}, {response.text}")
        
        if response.status_code == 200:
            return jsonify({"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"})
        else:
            logging.error(f"Telegram API Error: {response.text}")
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"}), 500
            
    except requests.exceptions.RequestException as e:
        logging.error(f"Request Exception: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram"}), 500
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return jsonify({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}), 500

@app.route('/<path:path>')
def static_proxy(path):
    return send_from_directory(app.static_folder, path)

if __name__ == '__main__':
    app.run(debug=True)
